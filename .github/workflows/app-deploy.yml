name: app-deploy
run-name: Package and deploy application
on:  push   # TESTING!  Habilitar somente no push na main
#  push:
#    branches:
#      - main

jobs:
  mvn-install-with-libs:
    runs-on: ubuntu-latest
    steps:
      - name: Dummy
        run: echo Disabled
      # Build da aplicacao retirado temporariamente para agilizar os testes com k8s
#      - name: Checkout
#        uses: actions/checkout@v4
#      - name: Set up JDK 21
#        uses: actions/setup-java@v4
#        with:
#          java-version: '21'
#          distribution: 'temurin'
#          cache: maven
#      - name: Maven Install and Copy libraries
#        run: mvn install dependency:copy-dependencies
#      - name: Prepare app directory
#        run: mkdir ./docker/temp_libs && cp ./modules/web-app/target/architect-burgers-webapi-*.jar ./docker/temp_libs/ && cp ./modules/web-app/target/lib/* ./docker/temp_libs/
#      - name: Archive app directory
#        uses: actions/upload-artifact@v4
#        with:
#          name: app-libs-dir
#          path: ./docker/temp_libs/*
#          retention-days: 1
      - id: OutputProjectVersion
        run: echo "project_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> "$GITHUB_OUTPUT"
    outputs:
      project_version: ${{ steps.OutputProjectVersion.outputs.project_version }}

  build-docker-image:
    needs: mvn-install-with-libs
    runs-on: ubuntu-latest
    env:
      PROJECT_VERSION: ${{ needs.mvn-install-with-libs.outputs.project_version }}
    steps:
      - name: Dummy
        run: echo Disabled
        # Build da aplicacao retirado temporariamente para agilizar os testes com k8s
#      - name: Checkout
#        uses: actions/checkout@v4
#
#      - name: Login to Docker Hub
#        uses: docker/login-action@v3
#        with:
#          username: ${{ vars.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3
#      - name: Download built artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: app-libs-dir
#          path: ./docker/temp_libs/
#      - name: Build and push
#        uses: docker/build-push-action@v6
#        with:
#          context: ./docker
#          push: true
#          tags: ${{ vars.DOCKERHUB_USERNAME }}/architect-burgers:latest,${{ vars.DOCKERHUB_USERNAME }}/architect-burgers:${{env.PROJECT_VERSION}}

  deploy-k8s:
    needs: build-docker-image
    runs-on: ubuntu-latest
    env:
      PROJECT_VERSION: ${{ needs.mvn-install-with-libs.outputs.project_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: "Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Verify EKS cluster
        run: ./deploy/utils/check-cluster-status.sh ${{ vars.EKS_CLUSTER_NAME }}
      - name: Get database URL
        id: get-db-url
        run: ./deploy/utils/get-database-url.sh >> $GITHUB_OUTPUT
      - name: Configure kubectl
        run: aws eks update-kubeconfig --name ${{ vars.EKS_CLUSTER_NAME }}

      - name: Prepare DB configmap
        run: |
          cat ./deploy/k8s/db/db-configs-cloud-template.yml \
             | sed "s/{DB_URL}/${{ steps.get-db-url.outputs.DB_URL }}/" \
             | sed "s/{DB_NAME}/${{vars.DATABASE_NAME}}/" \
             | sed "s/{DB_USER}/${{vars.DATABASE_USER}}/" \
             | sed "s/{DB_PASS}/${{secrets.DATABASE_PASSWORD}}/" > ./db-configs-cloud.yml

      - name: Checking
        run: cat ./db-configs-cloud.yml
